AXIOME -> FILE

FILE -> with ada ; procedure PROC eof

DECL -> type IDENT DEF_IDENT 
DECL -> procedure PROC
DECL -> function FUNC
DECL -> IDENT_PLUS : TYPE AFFECT_EXISTE ;

DEF_IDENT -> ; 
DEF_IDENT -> is DEF_IDENT_FIN

DEF_IDENT_FIN -> access IDENT ;
DEF_IDENT_FIN -> record CHAMPS_PLUS end record ;
 
FUNC -> IDENT PARAMS_EXISTE return TYPE is DECL_MULT begin INSTR_PLUS end IDENT_EXISTE ;

PROC -> IDENT is DECL_MULT begin INSTR_PLUS end IDENT_EXISTE ;

DECL_MULT -> DECL DECL_MULT
DECL_MULT -> ''

CHAMPS -> IDENT_PLUS : TYPE ;
CHAMPS_PLUS -> CHAMPS CHAMPS_SUITE
CHAMPS_SUITE -> CHAMPS_PLUS
CHAMPS_SUITE -> ''

TYPE -> IDENT
TYPE -> access IDENT

PARAMS -> ( PARAMS_PLUS )
PARAMS_EXISTE -> PARAMS
PARAMS_EXISTE -> ''
PARAMS_PLUS -> PARAM PARAMS_SUITE
PARAMS_SUITE -> ; PARAMS_PLUS
PARAMS_SUITE -> ''
PARAM -> IDENT_PLUS : MODE_EXISTE TYPE

MODE_EXISTE -> MODE
MODE_EXISTE -> ''
MODE -> in OUT_EXISTE
OUT_EXISTE -> out
OUT_EXISTE -> ''

AFFECT_EXISTE -> AFFECT
AFFECT_EXISTE -> ''
AFFECT -> ( := EXPR )

EXPR -> PRIO_7
EXPR_PLUS -> EXPR EXPR_SUITE
EXPR_SUITE -> , EXPR
EXPR_SUITE -> ''
EXPR_EXISTE -> EXPR
EXPR_EXISTE -> ''

INSTR_PLUS -> INSTR ; INSTR_SUITE
INSTR_PLUS -> return RETURN
INSTR_SUITE -> INSTR ;
INSTR_SUITE -> return RETURN
INSTR_SUITE -> ''
INSTR -> IDENT INSTR_FIN
INSTR_FIN -> := EXPR 
INSTR_FIN -> ''
INSTR_FIN -> ( EXPR_PLUS ) 
INSTR -> begin INSTR_PLUS end 
INSTR -> if EXPR THEN_EXISTE INSTR_PLUS ELSEIF_MULT ELSE_EXISTE end if 
INSTR -> for IDENT in REVERSE_EXISTE EXPR .. LOOP
INSTR -> while LOOP
RETURN -> EXPR_EXISTE

LOOP -> EXPR loop INSTR_PLUS end loop  
ELSEIF_MULT -> ELSEIF
ELSEIF_MULT -> ''
ELSEIF -> elif EXPR THEN_EXISTE INSTR_PLUS
ELSE_EXISTE -> ELSE
ELSE_EXISTE -> ''
ELSE -> else INSTR_PLUS

VAL -> ( PRIO_7 )
VAL -> IDENT IDENT_FIN
VAL -> INT
VAL -> CARAC
VAL -> true
VAL -> false
VAL -> null
VAL -> new IDENT
VAL -> character'val ( EXPR )
VAL -> 1 val

PRIO_1 -> VAL PRIO_1_SUITE
PRIO_1_SUITE -> PRIO_1_OP PRIO_1
PRIO_1_SUITE -> ''
PRIO_1_OP -> .

PRIO_2 -> PRIO_1 PRIO_2_SUITE
PRIO_2_SUITE -> PRIO_2_OP PRIO_2
PRIO_2_SUITE -> ''
PRIO_2_OP  -> *
PRIO_2_OP  -> /
PRIO_2_OP -> rem

PRIO_3 -> PRIO_2 PRIO_3_SUITE  
PRIO_3_SUITE -> PRIO_3_OP PRIO_3
PRIO_3_SUITE -> ''
PRIO_3_OP  -> +
PRIO_3_OP  -> -

PRIO_4 -> PRIO_3  PRIO_4_SUITE  
PRIO_4_SUITE -> PRIO_4_OP PRIO_4
PRIO_4_SUITE -> ''
PRIO_4_OP  -> >
PRIO_4_OP  -> >=
PRIO_4_OP  -> <
PRIO_4_OP  -> <= 

PRIO_5 -> not PRIO_4 PRIO_5_SUITE
PRIO_5 -> PRIO_4 PRIO_5_SUITE
PRIO_5_SUITE -> PRIO_5_OP PRIO_5
PRIO_5_SUITE -> ''
PRIO_5_OP -> =
PRIO_5_OP -> /=

PRIO_6 -> PRIO_5 PRIO_6_SUITE
PRIO_6_SUITE -> ''
PRIO_6_SUITE -> PRIO_6_OP PRIO_6 
PRIO_6_OP -> and PRIO_6_OP_SUITE
PRIO_6_OP_SUITE -> then
PRIO_6_OP_SUITE -> ''

PRIO_7 -> PRIO_6 PRIO_7_SUITE
PRIO_7_SUITE -> ''
PRIO_7_SUITE -> PRIO_7_OP PRIO_7
PRIO_7_OP -> or PRIO_7_OP_SUITE
PRIO_7_OP_SUITE -> else
PRIO_7_OP_SUITE -> ''

IDENT -> idf
IDENT_PLUS -> IDENT IDENT_SUITE
IDENT_EXISTE -> IDENT
IDENT_EXISTE -> ''
IDENT_SUITE -> , IDENT_PLUS
IDENT_SUITE -> ''
IDENT_FIN -> ( EXPR_PLUS )
IDENT_FIN -> ''

INT -> int
CARAC -> carac

REVERSE_EXISTE -> reverse
REVERSE_EXISTE -> ''